---
- name: End to end smoke tests
  # Use groups from hosts and metadata so override can be used in the dynamic inventory. Makes for a cleaner inventory
  hosts: 
    - app_servers
    - meta-app_servers_AnsibleGroup
    - database_servers
    - meta-database_servers_AnsibleGroup
  gather_facts: true
  become: true
  tags:
    - smoketest

  vars:
    app_servers: "{{ ( groups['app_servers'] | default([]) ) + ( groups['meta-app_servers_AnsibleGroup'] | default([]) ) }}"
    database_servers: "{{ ( groups['database_servers'] | default([]) ) + ( groups['meta-database_servers_AnsibleGroup'] | default([]) ) }}"

  tasks:
    - name: Smoketest Postgres database from each app server to each database server
      postgresql_ping:
        db: flask_db
        login_host: "{{ item[1] }}"
        login_user: flask
        login_password: redhat
        ssl_mode: disable
      delegate_to: "{{ item[0] }}"
      run_once: true
      loop: "{{ app_servers | product(database_servers) | list }}"
      tags:
        - smoketest

- name: End to end smoke tests
  hosts:
    - app_servers
    - meta-app_servers_AnsibleGroup
  become: false
  gather_facts: false
  tags:
    - smoketest
  vars:
    app_servers: "{{ ( groups['app_servers'] | default([]) ) + ( groups['meta-app_servers_AnsibleGroup'] | default([]) ) }}"
    load_balancers: "{{ ( groups['load_balancers'] | default([]) ) + ( groups['meta-load_balancers_AnsibleGroup'] | default([]) ) }}"
  tasks:
    # This won't guarantee that you will test each backend web server unless there is no other traffic
    - name: Check load balancers for correct response (once per backend web server)
      uri:
        url: "http://{{ hostvars[item[0]]['ansible_host'] }}/ping"
        return_content: yes
      until: '"alive" in result.content'
      retries: 10
      delay: 1
      register: result
      delegate_to: localhost
      loop: "{{ load_balancers | product(app_servers) }}"